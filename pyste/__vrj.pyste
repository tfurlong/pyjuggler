# PyJuggler is (C) Copyright 2002-2004 by Patrick Hartling
# Distributed under the GNU Lesser General Public License 2.1.  (See
# accompanying file COPYING.txt or http://www.gnu.org/copyleft/lesser.txt)

# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$

Kernel = Class('vrj::Kernel', 'vrj/Kernel/Kernel.h')
exclude(Kernel.initConfig)
exclude(Kernel.controlLoop)
exclude(Kernel.getInputManager)
exclude(Kernel.getThread)
set_policy(Kernel.instance, return_value_policy(reference_existing_object))
set_policy(Kernel.getUser, return_internal_reference())

App = Class('vrj::App', 'vrj/Kernel/App.h')
exclude(App.getSoundManager)

GlApp = Class('vrj::GlApp', 'vrj/Draw/OGL/GlApp.h')
exclude(GlApp.getDrawManager)
exclude(GlApp.getSoundManager)

# XXX: No Python bindings are available for OpenSG yet.
#Class('vrj::OpenSGApp', 'vrj/Draw/OpenSG/OpenSGApp.h')

User = Class('vrj::User', 'vrj/Kernel/User.h')
exclude(User.getHeadPosProxy)
exclude(User.config)

# -----------------------------------------------------------------------------
# XXX: The classes beyond this point have questinoable value.  They are not
# needed for applicatinos, but they can be useful for simplifying work on
# Python-based extensions to VR Juggler itself.
# -----------------------------------------------------------------------------
Display = Class('vrj::Display', 'vrj/Display/Display.h')
set_policy(Display.getViewport, return_internal_reference())
exclude(Display.configDisplayWindow)
exclude(Display.configViewports)
exclude(Display.updateProjections)
exclude(Display.setName)
exclude(Display.shouldDrawBorder)
exclude(Display.setOriginAndSize)
exclude(Display.setPipe)
exclude(Display.isStereoRequested)
exclude(Display.getConfigChunk)
exclude(Display.getGlFrameBufferConfig)
exclude(Display.config)

Projection = Class('vrj::Projection', 'vrj/Display/Projection.h')
set_policy(Projection.getViewport, return_internal_reference())
exclude(Projection.setEye)
exclude(Projection.setViewport)
exclude(Projection.setNearFar)
exclude(Projection.config)
exclude(Projection.outStream)

CameraProjection = Class('vrj::CameraProjection',
                         'vrj/Display/CameraProjection.h')
set_policy(CameraProjection.getViewport, return_internal_reference())
exclude(CameraProjection.setVerticalFOV)
exclude(CameraProjection.config)
exclude(CameraProjection.outStream)
exclude(CameraProjection.setViewport)
exclude(CameraProjection.setEye)
exclude(CameraProjection.setNearFar)

Viewport = Class('vrj::Viewport', 'vrj/Display/Viewport.h')
set_policy(Viewport.getUser, return_internal_reference())
set_policy(Viewport.getDisplay, return_internal_reference())
set_policy(Viewport.getLeftProj, return_internal_reference())
set_policy(Viewport.getRightProj, return_internal_reference())
set_policy(Viewport.getName, return_internal_reference())
exclude(Viewport.setName)
exclude(Viewport.setOriginAndSize)
exclude(Viewport.setDisplay)
exclude(Viewport.config)
exclude(Viewport.outStream)

SimViewport = Class('vrj::SimViewport', 'vrj/Display/SimViewport.h')
set_policy(SimViewport.getUser, return_internal_reference())
set_policy(SimViewport.getDisplay, return_internal_reference())
set_policy(SimViewport.getLeftProj, return_internal_reference())
set_policy(SimViewport.getRightProj, return_internal_reference())
set_policy(SimViewport.getName, return_internal_reference())
set_policy(SimViewport.getDrawSimInterface, return_internal_reference())
exclude(SimViewport.setDrawSimInterface)
exclude(SimViewport.config)
exclude(SimViewport.setName)
exclude(SimViewport.setOriginAndSize)
exclude(SimViewport.setDisplay)
exclude(SimViewport.config)
exclude(SimViewport.outStream)

Frustum = Class('vrj::Frustum', 'vrj/Display/Frustum.h')
exclude(Frustum.frust)
