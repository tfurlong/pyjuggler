# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# PyJuggler is (C) Copyright 2002, 2003 by Patrick Hartling
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# *************** <auto-copyright.pl END do not edit this line> ***************

# Basics ======================================================================
AllFromHeader('gmtl/Defines.h')
# ====================================================================== Basics

# gmtl::Matrix<> ==============================================================
Matrix = Template('gmtl::Matrix', 'gmtl/Matrix.h')

Matrix44f = Matrix('float 4 4')
rename(Matrix44f, 'Matrix44f')
exclude(Matrix44f.getData)
exclude(Matrix44f.mData)
#set_policy(Matrix44f.operator['()'], return_internal_reference())
exclude(Matrix44f.operator['()'])

Matrix33f = Matrix('float 3 3')
rename(Matrix33f, 'Matrix33f')
exclude(Matrix33f.getData)
exclude(Matrix33f.mData)
#set_policy(Matrix33f.operator['()'], return_internal_reference())
exclude(Matrix33f.operator['()'])

Matrix_identity = Function('gmtl::identity', 'gmtl-functions.h')
set_policy(Matrix_identity, return_internal_reference())

Matrix_zero = Function('gmtl::zero', 'gmtl-functions.h')
set_policy(Matrix_zero, return_internal_reference())

set_policy(Function('gmtl::mult', 'gmtl-functions.h'),
           return_internal_reference())

Matrix_sub = Function('gmtl::sub', 'gmtl-functions.h')
set_policy(Matrix_sub, return_internal_reference())

Matrix_add = Function('gmtl::add', 'gmtl-functions.h')
set_policy(Matrix_add, return_internal_reference())

Matrix_postMult = Function('gmtl::postMult', 'gmtl-functions.h')
set_policy(Matrix_postMult, return_internal_reference())

Matrix_preMult = Function('gmtl::preMult', 'gmtl-functions.h')
set_policy(Matrix_preMult, return_internal_reference())

Matrix_transpose = Function('gmtl::transpose', 'gmtl-functions.h')
set_policy(Matrix_transpose, return_internal_reference())

Matrix_invertFull = Function('gmtl::invertFull', 'gmtl-functions.h')
set_policy(Matrix_invertFull, return_internal_reference())

Matrix_invert = Function('gmtl::invert', 'gmtl-functions.h')
set_policy(Matrix_invert, return_internal_reference())
# ============================================================== gmtl::Matrix<>

# gmtl::Vec<> =================================================================
VecBase = Template('gmtl::VecBase', 'gmtl/Vec.h')

VecBase3f = VecBase('float 3')
rename(VecBase3f, 'VecBase3f')
exclude(VecBase3f.getData)
exclude(VecBase3f.mData)

VecBase4f = VecBase('float 4')
rename(VecBase4f, 'VecBase4f')
exclude(VecBase4f.getData)
exclude(VecBase4f.mData)

VecBase3i = VecBase('int 3')
rename(VecBase3i, 'VecBase3i')
exclude(VecBase3i.getData)
exclude(VecBase3i.mData)

VecBase2f = VecBase('float 2')
rename(VecBase2f, 'VecBase2f')
exclude(VecBase2f.getData)
exclude(VecBase2f.mData)

VecBase2i = VecBase('int 2')
rename(VecBase2i, 'VecBase2i')
exclude(VecBase2i.getData)
exclude(VecBase2i.mData)

Vec = Template('gmtl::Vec', 'gmtl/Vec.h')

Vec3f = Vec('float 3')
rename(Vec3f, 'Vec3f')
exclude(Vec3f.getData)

Vec4f = Vec('float 4')
rename(Vec4f, 'Vec4f')
exclude(Vec4f.getData)

Function('gmtl::dot', 'gmtl-functions.h')
Function('gmtl::length', 'gmtl-functions.h')
Function('gmtl::lengthSquared', 'gmtl-functions.h')

# XXX: This isn't quite right.  gmtl::normalize() does not return a reference
# in the vector case, but it does in the quaternion case.  What I need is a
# way to tell Pyste which version is which...
set_policy(Function('gmtl::normalize', 'gmtl-functions.h'),
           return_internal_reference())

Function('gmtl::isNormalized', 'gmtl-functions.h')

# XXX: This isn't quite right.  One version of gmtl::cross() returns a
# reference, and the other does not.  This generates code that would indicate
# that both return a reference.
set_policy(Function('gmtl::cross', 'gmtl-functions.h'),
           return_internal_reference())

set_policy(Function('gmtl::reflect', 'gmtl-functions.h'),
           return_internal_reference())

set_policy(Function('gmtl::lerp', 'gmtl-functions.h'),
           return_internal_reference())
# ================================================================= gmtl::Vec<>

# gmtl::Quat<> ================================================================
Quat = Template('gmtl::Quat', 'gmtl/Quat.h')

Quatf = Quat('float')
rename(Quatf, 'Quatf')
exclude(Quatf.getData)

# Similar to the above where it is necessary to expose gmtl::Matrix33f and
# gmtl::Vec4f, we need another instance of gmtl::Quat<T> so that the function
# overloading will work correctly.  Blah...
Quatd = Quat('double')
rename(Quatd, 'Quatd')
exclude(Quatd.getData)

set_policy(Function('gmtl::negate', 'gmtl-functions.h'),
           return_internal_reference())
set_policy(Function('gmtl::div', 'gmtl-functions.h'),
           return_internal_reference())
set_policy(Function('gmtl::conj', 'gmtl-functions.h'),
           return_internal_reference())
set_policy(Function('gmtl::invert', 'gmtl-functions.h'),
           return_internal_reference())
set_policy(Function('gmtl::exp', 'gmtl-functions.h'),
           return_internal_reference())
set_policy(Function('gmtl::log', 'gmtl-functions.h'),
           return_internal_reference())
set_policy(Function('gmtl::squad', 'gmtl-functions.h'),
           return_internal_reference())
set_policy(Function('gmtl::slerp', 'gmtl-functions.h'),
           return_internal_reference())

Function('gmtl::isEquiv', 'gmtl-functions.h')
# ================================================================ gmtl::Quat<>

# gmtl::Point<> ===============================================================
Point = Template('gmtl::Point', 'gmtl/Point.h')

Point3f = Point('float 3')
rename(Point3f, 'Point3f')

Point3i = Point('int 3')
rename(Point3i, 'Point3i')

Point2f = Point('float 2')
rename(Point2f, 'Point2f')

Point2i = Point('int 2')
rename(Point2i, 'Point2i')
# =============================================================== gmtl::Point<>

# gmtl::EulerAngle<> ==========================================================
EulerAngle = Template('gmtl::EulerAngle', 'gmtl/EulerAngle.h')

EulerAngleXYZf = EulerAngle('float gmtl::XYZ')
rename(EulerAngleXYZf, 'EulerAngleXYZf')
exclude(EulerAngleXYZf.getData)

EulerAngleZYXf = EulerAngle('float gmtl::ZYX')
rename(EulerAngleZYXf, 'EulerAngleZYXf')
exclude(EulerAngleZYXf.getData)

EulerAngleZXYf = EulerAngle('float gmtl::ZXY')
rename(EulerAngleZXYf, 'EulerAngleZXYf')
exclude(EulerAngleZXYf.getData)
# ========================================================== gmtl::EulerAngle<>

# gmtl::AxisAngle<> ===========================================================
AxisAngle = Template('gmtl::AxisAngle', 'gmtl/AxisAngle.h')

AxisAnglef = AxisAngle('float')
rename(AxisAnglef, 'AxisAnglef')

AxisAngled = AxisAngle('double')
rename(AxisAngled, 'AxisAngled')
# =========================================================== gmtl::AxisAngle<>

# gmtl::Sphere<> ==============================================================
Sphere = Template('gmtl::Sphere', 'gmtl/Sphere.h')

Spheref = Sphere('float')
rename(Spheref, 'Spheref')

Sphered = Sphere('double')
rename(Sphered, 'Sphered')
# ============================================================== gmtl::Sphere<>

# gmtl::AABox<> ===============================================================
AABox = Template('gmtl::AABox', 'gmtl/AABox.h')

AABoxf = AABox('float')
rename(AABoxf, 'AABoxf')

AABoxd = AABox('double')
rename(AABoxd, 'AABoxd')
# =============================================================== gmtl::AABox<>

# gmtl::Ray<> =================================================================
Ray = Template('gmtl::Ray', 'gmtl/Ray.h')

Rayf = Ray('float')
rename(Rayf, 'Rayf')

Rayd = Ray('double')
rename(Rayd, 'Rayd')
# ================================================================= gmtl::Ray<>

# gmtl::LineSeg<> =============================================================
LineSeg = Template('gmtl::LineSeg', 'gmtl/LineSeg.h')

LineSegf = LineSeg('float')
rename(LineSegf, 'LineSegf')

LineSegd = LineSeg('double')
rename(LineSegd, 'LineSegd')
# ============================================================= gmtl::LineSeg<>

# gmtl::Plane<> ===============================================================
Plane = Template('gmtl::Plane', 'gmtl/Plane.h')

Planef = Plane('float')
rename(Planef, 'Planef')

Planed = Plane('double')
rename(Planed, 'Planed')

Function('gmtl::distance', 'gmtl-functions.h')
Function('gmtl::whichSide', 'gmtl-functions.h')
Function('gmtl::findNearestPt', 'gmtl-functions.h')
# =============================================================== gmtl::Plane<>

# gmtl::Tri<> =================================================================
Tri = Template('gmtl::Tri', 'gmtl/Tri.h')

Trif = Tri('float')
rename(Trif, 'Trif')

Trid = Tri('double')
rename(Trid, 'Trid')

Trii = Tri('int')
rename(Trii, 'Trii')

Function('gmtl::center', 'gmtl-functions.h')
# ================================================================= gmtl::Tri<>

# Generator operations ========================================================
Function('gmtlWrapper::makeRotMatrix33', 'gmtl-functions.h')
Function('gmtlWrapper::makeRotMatrix44', 'gmtl-functions.h')
Function('gmtlWrapper::makeRotQuat', 'gmtl-functions.h')
Function('gmtlWrapper::makeRotEulerAngleXYZ', 'gmtl-functions.h')
Function('gmtlWrapper::makeRotEulerAngleZYX', 'gmtl-functions.h')
Function('gmtlWrapper::makeRotEulerAngleZXY', 'gmtl-functions.h')

Function('gmtlWrapper::makeDirCosMatrix33', 'gmtl-functions.h')
Function('gmtlWrapper::makeDirCosMatrix44', 'gmtl-functions.h')

Function('gmtlWrapper::makeTransMatrix44', 'gmtl-functions.h')
Function('gmtlWrapper::makeTransVec3', 'gmtl-functions.h')

Function('gmtlWrapper::makeScaleMatrix44', 'gmtl-functions.h')

Function('gmtlWrapper::makeAxesMatrix44', 'gmtl-functions.h')

set_policy(Function('gmtl::setRot', 'gmtl-functions.h'),
                    return_internal_reference())
Function('gmtl::makeVec', 'gmtl-functions.h')
Function('gmtl::makeNormal', 'gmtl-functions.h')
set_policy(Function('gmtl::setTrans', 'gmtl-functions.h'),
                    return_internal_reference())
set_policy(Function('gmtl::setPure', 'gmtl-functions.h'),
                    return_internal_reference())
Function('gmtl::makePure', 'gmtl-functions.h')
Function('gmtl::makeConj', 'gmtl-functions.h')
Function('gmtl::makeInvert', 'gmtl-functions.h')
set_policy(Function('gmtl::set', 'gmtl-functions.h'),
                    return_internal_reference())
set_policy(Function('gmtl::setScale', 'gmtl-functions.h'),
                    return_internal_reference())

Function('gmtl::makeYRot', 'gmtl-functions.h')
Function('gmtl::makeXRot', 'gmtl-functions.h')
Function('gmtl::makeZRot', 'gmtl-functions.h')
set_policy(Function('gmtl::setDirCos', 'gmtl-functions.h'),
                    return_internal_reference())
set_policy(Function('gmtl::setAxes', 'gmtl-functions.h'),
                    return_internal_reference())
Function('gmtl::makeTranspose', 'gmtl-functions.h')
Function('gmtl::makeInverse', 'gmtl-functions.h')
# ======================================================== Generator operations

# Containment operations ======================================================
Function('gmtl::isInVolume', 'gmtl-functions.h')
set_policy(Function('gmtl::extendVolume', 'gmtl-functions.h'),
                    return_internal_reference())
Function('gmtl::isOnVolume', 'gmtl-functions.h')
set_policy(Function('gmtl::makeVolume', 'gmtl-functions.h'),
                    return_internal_reference())
# ====================================================== Containment operations

# Intersection operations =====================================================
Function('gmtl::intersect', 'gmtl-functions.h')
# ===================================================== Intersection operations

# Transform operations ========================================================
set_policy(Function('gmtl::xform', 'gmtl-functions.h'),
           return_internal_reference())
# ======================================================== Transform operations

# General operations ==========================================================
Function('gmtl::isEqual', 'gmtl-functions.h')
# ========================================================== General operations
