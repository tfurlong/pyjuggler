# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# PyJuggler is (C) Copyright 2002, 2003 by Patrick Hartling
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# *************** <auto-copyright.pl END do not edit this line> ***************

# gmtl::Matrix<> ==============================================================
Matrix = Template('gmtl::Matrix', 'gmtl/Matrix.h')

Matrix44f = Matrix('float 4 4')
rename(Matrix44f, 'Matrix44f')
exclude(Matrix44f.getData)
exclude(Matrix44f.mData)

Matrix33f = Matrix('float 3 3')
rename(Matrix33f, 'Matrix33f')
exclude(Matrix33f.getData)
exclude(Matrix33f.mData)

Matrix_identity = Function('gmtl::identity', 'gmtl-functions.h')
set_policy(Matrix_identity, return_internal_reference())

Matrix_zero = Function('gmtl::zero', 'gmtl-functions.h')
set_policy(Matrix_zero, return_internal_reference())

set_policy(Function('gmtl::mult', 'gmtl-functions.h'),
           return_internal_reference())

Matrix_sub = Function('gmtl::sub', 'gmtl-functions.h')
set_policy(Matrix_sub, return_internal_reference())

Matrix_add = Function('gmtl::add', 'gmtl-functions.h')
set_policy(Matrix_add, return_internal_reference())

Matrix_postMult = Function('gmtl::postMult', 'gmtl-functions.h')
set_policy(Matrix_postMult, return_internal_reference())

Matrix_preMult = Function('gmtl::preMult', 'gmtl-functions.h')
set_policy(Matrix_preMult, return_internal_reference())

Matrix_transpose = Function('gmtl::transpose', 'gmtl-functions.h')
set_policy(Matrix_transpose, return_internal_reference())

Matrix_invertFull = Function('gmtl::invertFull', 'gmtl-functions.h')
set_policy(Matrix_invertFull, return_internal_reference())

Matrix_invert = Function('gmtl::invert', 'gmtl-functions.h')
set_policy(Matrix_invert, return_internal_reference())
# ============================================================== gmtl::Matrix<>

# gmtl::Vec<> =================================================================
VecBase = Template('gmtl::VecBase', 'gmtl/Vec.h')

VecBase3f = VecBase('float 3')
rename(VecBase3f, 'VecBase3f')
exclude(VecBase3f.getData)
exclude(VecBase3f.mData)

VecBase4f = VecBase('float 4')
rename(VecBase4f, 'VecBase4f')
exclude(VecBase4f.getData)
exclude(VecBase4f.mData)

Vec = Template('gmtl::Vec', 'gmtl/Vec.h')

Vec3f = Vec('float 3')
rename(Vec3f, 'Vec3f')
exclude(Vec3f.getData)

Vec4f = Vec('float 4')
rename(Vec4f, 'Vec4f')
exclude(Vec4f.getData)

Function('gmtl::dot', 'gmtl-functions.h')
Function('gmtl::length', 'gmtl-functions.h')
Function('gmtl::lengthSquared', 'gmtl-functions.h')
Function('gmtl::normalize', 'gmtl-functions.h')
Function('gmtl::isNormalized', 'gmtl-functions.h')

# XXX: This isn't quite right.  One version of gmtl::cross() returns a
# reference, and the other does not.  This generates code that would indicate
# that both return a reference.
set_policy(Function('gmtl::cross', 'gmtl-functions.h'),
           return_internal_reference())

set_policy(Function('gmtl::reflect', 'gmtl-functions.h'),
           return_internal_reference())

set_policy(Function('gmtl::lerp', 'gmtl-functions.h'),
           return_internal_reference())
# ================================================================= gmtl::Vec<>

# gmtl::Quat<> ================================================================
Quat = Template('gmtl::Quat', 'gmtl/Quat.h')

Quatf = Quat('float')
rename(Quatf, 'Quatf')
exclude(Quatf.getData)

# Similar to the above where it is necessary to expose gmtl::Matrix33f and
# gmtl::Vec4f, we need another instance of gmtl::Quat<T> so that the function
# overloading will work correctly.  Blah...
Quatd = Quat('double')
rename(Quatd, 'Quatd')
exclude(Quatd.getData)

set_policy(Function('gmtl::negate', 'gmtl-functions.h'),
           return_internal_reference())
set_policy(Function('gmtl::div', 'gmtl-functions.h'),
           return_internal_reference())
set_policy(Function('gmtl::conj', 'gmtl-functions.h'),
           return_internal_reference())
set_policy(Function('gmtl::invert', 'gmtl-functions.h'),
           return_internal_reference())
set_policy(Function('gmtl::exp', 'gmtl-functions.h'),
           return_internal_reference())
set_policy(Function('gmtl::log', 'gmtl-functions.h'),
           return_internal_reference())
set_policy(Function('gmtl::squad', 'gmtl-functions.h'),
           return_internal_reference())
set_policy(Function('gmtl::slerp', 'gmtl-functions.h'),
           return_internal_reference())

Function('gmtl::isEquiv', 'gmtl-functions.h')
# ================================================================ gmtl::Quat<>

# gmtl::Point<> ===============================================================
Point = Template('gmtl::Point', 'gmtl/Point.h')

Point3f = Point('float 3')
rename(Point3f, 'Point3f')

Point3i = Point('int 3')
rename(Point3i, 'Point3i')

Point2f = Point('float 2')
rename(Point2f, 'Point2f')

Point2i = Point('int 2')
rename(Point2i, 'Point2i')
# =============================================================== gmtl::Point<>

# gmtl::EulerAngle<> ==========================================================
EulerAngle = Template('gmtl::EulerAngle', 'gmtl/EulerAngle.h')

EulerAngleXYZf = EulerAngle('float gmtl::XYZ')
rename(EulerAngleXYZf, 'EulerAngleXYZf')
exclude(EulerAngleXYZf.getData)

EulerAngleZYXf = EulerAngle('float gmtl::ZYX')
rename(EulerAngleZYXf, 'EulerAngleZYXf')
exclude(EulerAngleZYXf.getData)

EulerAngleZXYf = EulerAngle('float gmtl::ZXY')
rename(EulerAngleZXYf, 'EulerAngleZXYf')
exclude(EulerAngleZXYf.getData)
# ========================================================== gmtl::EulerAngle<>

# General operations.
set_policy(Function('gmtl::operator+=', 'gmtl-functions.h'),
           return_internal_reference())
Function('gmtl::operator+', 'gmtl-functions.h')
set_policy(Function('gmtl::operator-=', 'gmtl-functions.h'),
           return_internal_reference())
Function('gmtl::operator-', 'gmtl-functions.h')
set_policy(Function('gmtl::operator*=', 'gmtl-functions.h'),
           return_internal_reference())
Function('gmtl::operator*', 'gmtl-functions.h')
set_policy(Function('gmtl::operator/=', 'gmtl-functions.h'),
           return_internal_reference())
Function('gmtl::operator/', 'gmtl-functions.h')
Function('gmtl::operator==', 'gmtl-functions.h')
Function('gmtl::operator!=', 'gmtl-functions.h')

Function('gmtl::isEqual', 'gmtl-functions.h')
