# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# PyJuggler is (C) Copyright 2002, 2003 by Patrick Hartling
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# *************** <auto-copyright.pl END do not edit this line> ***************

# Base input data types =======================================================
Class('gadget::AnalogData', 'gadget/Type/AnalogData.h')
Class('gadget::DigitalData', 'gadget/Type/DigitalData.h')
#Class('gadget::GloveData', 'gadget/Type/Glove.h')
Class('gadget::PositionData', 'gadget/Type/PositionData.h')
# ======================================================= Base input data types

# Base input types ============================================================
Analog = Class('gadget::Analog', 'gadget/Type/Analog.h')
set_policy(Analog.getAnalogDataBuffer, return_internal_reference())

Digital = Class('gadget::Digital', 'gadget/Type/Digital.h')
set_policy(Digital.getDigitalDataBuffer, return_internal_reference())

#Class('gadget::Glove', 'gadget/Type/Glove.h')

#Class('gadget::GloveGesture', 'gadget/Type/GloveGesture.h')

Position = Class('gadget::Position', 'gadget/Type/Position.h')
set_policy(Position.getPositionDataBuffer, return_internal_reference())
# ============================================================ Base input types

# Proxy types =================================================================
AnalogProxy = Class('gadget::AnalogProxy', 'gadget/Type/AnalogProxy.h')
set_policy(AnalogProxy.getAnalogPtr, return_internal_reference())
exclude(AnalogProxy.getProxiedInputDevice)

DigitalProxy = Class('gadget::DigitalProxy', 'gadget/Type/DigitalProxy.h')
set_policy(DigitalProxy.getDigitalData, return_internal_reference())
set_policy(DigitalProxy.getDigitalPtr, return_internal_reference())
exclude(DigitalProxy.getProxiedInputDevice)

#Class('gadget::GestureProxy', 'gadget/Type/GestureProxy.h')

#Class('gadget::GloveProxy', 'gadget/Type/GloveProxy.h')

PositionProxy = Class('gadget::PositionProxy', 'gadget/Type/PositionProxy.h')
set_policy(PositionProxy.getPositionData, return_internal_reference())
set_policy(PositionProxy.getPositionPtr, return_internal_reference())
exclude(PositionProxy.getProxiedInputDevice)
# ================================================================= Proxy types

# Smart pointers ==============================================================
Class('gadget::BaseDeviceInterface', 'gadget/Type/DeviceInterface.h')

AnalogInterface = Class('gadgetWrapper::AnalogInterface',
                         'gadgeteer-wrappers.h')
set_policy(AnalogInterface.getProxy, return_internal_reference())

DigitalInterface = Class('gadgetWrapper::DigitalInterface',
                         'gadgeteer-wrappers.h')
set_policy(DigitalInterface.getProxy, return_internal_reference())

PositionInterface = Class('gadgetWrapper::PositionInterface',
                          'gadgeteer-wrappers.h')
set_policy(PositionInterface.getProxy, return_internal_reference())

# XXX: I am not thrilled with this redefinition of DeviceInterface just to
# get the necessary headers included.  It would be nice if Pyste would allow
# more than one header to be included at a time.
#DeviceInterface = Template('gadget::DeviceInterface',
#                           'gadget/Type/AnalogInterface.h')
#AnalogInterface = DeviceInterface('gadget::AnalogProxy')
#rename(AnalogInterface, 'AnalogInterface')
#set_policy(AnalogInterface.getProxy, return_internal_reference())

#DeviceInterface = Template('gadget::DeviceInterface',
#                           'gadget/Type/DigitalInterface.h')
#DigitalInterface = DeviceInterface('gadget::DigitalProxy')
#rename(DigitalInterface, 'DigitalInterface')
#set_policy(DigitalInterface.getProxy, return_internal_reference())

#DeviceInterface = Template('gadget::DeviceInterface',
#                           'gadget/Type/GestureInterface.h')
#GestureInterface = DeviceInterface('gadget::GestureProxy')
#rename(GestureInterface, 'GestureInterface')
#set_policy(GestureInterface.getProxy, return_internal_reference())
#
#DeviceInterface = Template('gadget::DeviceInterface',
#                           'gadget/Type/GloveInterface.h')
#GloveInterface = DeviceInterface('gadget::GloveProxy')
#rename(GloveInterface, 'GloveInterface')
#set_policy(GloveInterface.getProxy, return_internal_reference())

#DeviceInterface = Template('gadget::DeviceInterface',
#                           'gadget/Type/PositionInterface.h')
#PositionInterface = DeviceInterface('gadget::PositionProxy')
#rename(PositionInterface, 'PositionInterface')
#set_policy(PositionInterface.getProxy, return_internal_reference())
# ============================================================== Smart pointers
