# PyJuggler is (C) Copyright 2002-2005 by Patrick Hartling
# Distributed under the GNU Lesser General Public License 2.1.  (See
# accompanying file COPYING.txt or http://www.gnu.org/copyleft/lesser.txt)

# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$

# The all-important Input Manager =============================================
InputManager = Class('gadget::InputManager', 'gadget/InputManager.h')
exclude(InputManager.getDeviceFactory)
set_policy(InputManager.instance,
           return_value_policy(reference_existing_object))
set_policy(InputManager.getDevice, return_internal_reference())
set_policy(InputManager.getProxy, return_internal_reference())
# ============================================= The all-important Input Manager

# Base input data types =======================================================
Class('gadget::AnalogData', 'gadget/Type/AnalogData.h')
Class('gadget::DigitalData', 'gadget/Type/DigitalData.h')
#Class('gadget::GloveData', 'gadget/Type/Glove.h')
Class('gadget::PositionData', 'gadget/Type/PositionData.h')
Class('gadget::StringData', 'gadget/Type/StringData.h')
# ======================================================= Base input data types

# Base input types ============================================================
Analog = Class('gadget::Analog', 'gadget/Type/Analog.h')
set_policy(Analog.getAnalogDataBuffer, return_internal_reference())

Digital = Class('gadget::Digital', 'gadget/Type/Digital.h')
set_policy(Digital.getDigitalDataBuffer, return_internal_reference())

#Class('gadget::Glove', 'gadget/Type/Glove.h')

#Class('gadget::GloveGesture', 'gadget/Type/GloveGesture.h')

Position = Class('gadget::Position', 'gadget/Type/Position.h')
set_policy(Position.getPositionDataBuffer, return_internal_reference())

Class('gadget::KeyboardMouse', 'gadget/Type/KeyboardMouse.h')

SpeechRecogDigital = Class('gadget::SpeechRecogDigital',
                           'gadget/Type/SpeechRecogDigital.h')

SpeechRecogString = Class('gadget::SpeechRecogString',
                          'gadget/Type/SpeechRecogString.h')
set_policy(SpeechRecogString.getStringDataBuffer, return_internal_reference())
# ============================================================ Base input types

# Proxy types =================================================================
AnalogProxy = Class('gadget::AnalogProxy', 'gadget/Type/AnalogProxy.h')
set_policy(AnalogProxy.getAnalogPtr, return_internal_reference())
exclude(AnalogProxy.getProxiedInputDevice)

DigitalProxy = Class('gadget::DigitalProxy', 'gadget/Type/DigitalProxy.h')
set_policy(DigitalProxy.getDigitalData, return_internal_reference())
set_policy(DigitalProxy.getDigitalPtr, return_internal_reference())
exclude(DigitalProxy.getProxiedInputDevice)

#Class('gadget::GestureProxy', 'gadget/Type/GestureProxy.h')

#Class('gadget::GloveProxy', 'gadget/Type/GloveProxy.h')

PositionProxy = Class('gadget::PositionProxy', 'gadget/Type/PositionProxy.h')
set_policy(PositionProxy.getPositionData, return_internal_reference())
set_policy(PositionProxy.getPositionPtr, return_internal_reference())
exclude(PositionProxy.getProxiedInputDevice)

KeyboardMouseProxy = Class('gadget::KeyboardMouseProxy',
                           'gadget/Type/KeyboardMouseProxy.h')
set_policy(KeyboardMouseProxy.getKeyboardMousePtr, return_internal_reference())
exclude(KeyboardMouseProxy.getProxiedInputDevice)

SpeechRecogDigitalProxy = Class('gadget::SpeechRecogDigitalProxy',
                                'gadget/Type/SpeechRecogDigitalProxy.h')
set_policy(SpeechRecogDigitalProxy.getDigitalData, return_internal_reference())
set_policy(SpeechRecogDigitalProxy.getSpeechRecogDigitalPtr,
           return_internal_reference())

SpeechRecogStringProxy = Class('gadget::SpeechRecogStringProxy',
                               'gadget/Type/SpeechRecogStringProxy.h')
set_policy(SpeechRecogStringProxy.getStringData,
           return_internal_reference())
set_policy(SpeechRecogStringProxy.getSpeechRecogStringPtr,
           return_internal_reference())
exclude(SpeechRecogStringProxy.getProxiedInputDevice)
# ================================================================= Proxy types

# Smart pointers ==============================================================
Class('gadget::BaseDeviceInterface', 'gadget/Type/DeviceInterface.h')

AnalogInterface = Class('gadgetWrapper::AnalogInterface',
                         'gadgeteer-wrappers.h')
set_policy(AnalogInterface.getProxy, return_internal_reference())

DigitalInterface = Class('gadgetWrapper::DigitalInterface',
                         'gadgeteer-wrappers.h')
set_policy(DigitalInterface.getProxy, return_internal_reference())

PositionInterface = Class('gadgetWrapper::PositionInterface',
                          'gadgeteer-wrappers.h')
set_policy(PositionInterface.getProxy, return_internal_reference())

KeyboardMouseInterface = Class('gadgetWrapper::KeyboardMouseInterface',
                               'gadgeteer-wrappers.h')
set_policy(KeyboardMouseInterface.getProxy, return_internal_reference())

SpeechRecogDigitalInterface = Class('gadgetWrapper::SpeechRecogDigitalInterface',
                                    'gadgeteer-wrappers.h')
set_policy(SpeechRecogDigitalInterface.getProxy, return_internal_reference())

SpeechRecogStringInterface = Class('gadgetWrapper::SpeechRecogStringInterface',
                                   'gadgeteer-wrappers.h')
set_policy(SpeechRecogStringInterface.getProxy, return_internal_reference())

# XXX: I am not thrilled with this redefinition of DeviceInterface just to
# get the necessary headers included.  It would be nice if Pyste would allow
# more than one header to be included at a time.
#DeviceInterface = Template('gadget::DeviceInterface',
#                           'gadget/Type/AnalogInterface.h')
#AnalogInterface = DeviceInterface('gadget::AnalogProxy')
#rename(AnalogInterface, 'AnalogInterface')
#set_policy(AnalogInterface.getProxy, return_internal_reference())

#DeviceInterface = Template('gadget::DeviceInterface',
#                           'gadget/Type/DigitalInterface.h')
#DigitalInterface = DeviceInterface('gadget::DigitalProxy')
#rename(DigitalInterface, 'DigitalInterface')
#set_policy(DigitalInterface.getProxy, return_internal_reference())

#DeviceInterface = Template('gadget::DeviceInterface',
#                           'gadget/Type/GestureInterface.h')
#GestureInterface = DeviceInterface('gadget::GestureProxy')
#rename(GestureInterface, 'GestureInterface')
#set_policy(GestureInterface.getProxy, return_internal_reference())
#
#DeviceInterface = Template('gadget::DeviceInterface',
#                           'gadget/Type/GloveInterface.h')
#GloveInterface = DeviceInterface('gadget::GloveProxy')
#rename(GloveInterface, 'GloveInterface')
#set_policy(GloveInterface.getProxy, return_internal_reference())

#DeviceInterface = Template('gadget::DeviceInterface',
#                           'gadget/Type/PositionInterface.h')
#PositionInterface = DeviceInterface('gadget::PositionProxy')
#rename(PositionInterface, 'PositionInterface')
#set_policy(PositionInterface.getProxy, return_internal_reference())
# ============================================================== Smart pointers

# Event handling ==============================================================
AllFromHeader('gadget/Type/KeyboardMouse/Keys.h')
Enum('gadget::EventType', 'gadget/Type/KeyboardMouse/Event.h')
use_shared_ptr(Class('gadget::Event', 'gadget/Type/KeyboardMouse/Event.h'))
use_shared_ptr(Class('gadget::KeyEvent',
                     'gadget/Type/KeyboardMouse/KeyEvent.h'))
use_shared_ptr(Class('gadget::MouseEvent',
                     'gadget/Type/KeyboardMouse/MouseEvent.h'))
# ============================================================== Event handling
