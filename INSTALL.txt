Compiling
=========

To compile PyJuggler, you must have an installation of Boost.Python v2.
The VR Juggler source tree comes with the complete Boost source, and you
can use that to compile Boost.Python.  Refer to the following website
for instructions on building Boost.Python:

   http://www.boost.org/libs/python/doc/building.html

As with building anything that depends on VR Juggler, you must have the
environment variable $VJ_BASE_DIR set, and $VJ_BASE_DIR/bin must be in
your path.

There are three ways to build PyJuggler:

   1) Using Visual Studio
   2) Using Boost.Build (bjam)
   3) Using configure and GNU make

The second option requires that you have the Boost source tree locally.
This will probably be the case if you have to build Boost.Python from source.
If getting the Boost source is not an option, you can use the first or the
third build processes depending on your target platform.  However, only the
Visual Studio build works on Windows right now.  The Boost.Build build
is currently broken on all platforms.

BUILD REQUIREMENTS
==================

Before reading any further, make sure you understand the requirements
for compiling PyJuggler on your local operating system.

   * Linux, FreeBSD, or GCC platforms in general

        It is highly recommended that GCC 3.2 or newer be used.  Make
        sure you use the same version of GCC to compile VR Juggler,
        Boost.Python, PyGMTL, and PyJuggler.  If the same C++ compiler
        version is not used, you may get poor results during compiling,
        linking, or execution.

   * Windows

        Visual C++ 7.1 (from .NET 2003) is required for building PyJuggler.
        This means that you must also have an installation of VR Juggler
        compiled with Visual Studio 7.1.  Older versions will not work for
        this template-heavy code, and there will be link errors if you try
        to link against a VR Juggler installation compiled with VC++ 7.0.

        Set the environment variable %VJ_DEPS_DIR% to the base directory of
        the VR Juggler dependencies.  This directory must contain a
        subdirectory named 'include' that contains the NSPR and CppDOM
        headers, and it must contain a subdirectory named 'lib' that contains
        the natively compiled NSPR and CppDOM libraries.

Using Visual Studio
===================

To build PyJuggler on Windows, it is currently recommended that the
Visual Studio solution be used.  More information about it can be found
in the file README.html in the vc7 subdirectory.

Using Boost.Build
=================

*** NOTICE ***

Using Boost.Build to compile PyJuggler is currently broken due to unexpected
complications with the managing of Boost installations.  Do not use it!

*** NOTICE ***

   NOTE: If you use this method for compiling PyJuggler, you do not have
         to build and install Boost.Python separately.  Boost.Python is
         built automatically as a dependency of PyJuggler.

The process for compiling with Boost.Build is fairly straightfowrad.
First, make sure you have a copy of Boost Jam installed.  It is normally
installed as the command bjam.  Go to the following webpage for details
on how to get or compile Boost Jam:

   http://www.boost.org/tools/build/index.html#Jam

Once you have bjam, follow these simple steps:

   1) Move the *entire* PyJuggler source tree into the directory
      <BOOST DIR>/libs/python, where <BOOST DIR> is the base directory
      of the Boost source tree for Boost 1.31 or newer.
   2) Rename the root of the PyJuggler source tree to 'pyjuggler' (case
      matters on UNIX-based platforms).  At this point, there should be
      a directory <BOOST DIR>/libs/python/pyjuggler that contains the
      subdirectories src and pyjutil as well as a file named "Jamfile" that
      will be used for compiling.
   3) Set the following environment variables:

         VJ_BASE_DIR: VR Juggler installation directory
         VJ_DEPS_DIR: VR Juggler dependency installation directory

      If you want to compile in the bindings for the class vrj::OsgApp,
      set the following environment variable:

         OSGHOME: Open Scene Graph installation directory

   4) Run bjam.  Make sure to use the command 'bjam' to get the correct
      build behavior.  The usage will vary from platform to platform, but
      here are the common variations:

         Linux, FreeBSD: bjam -sTOOLS=gcc
         IRIX: bjam -sTOOLS=mipspro
         Windows: bjam -sTOOLS=vc7.1

      On Windows, make sure the environment variable %VC7_ROOT% points
      to the Vc7 subdirectory of your MS Visual Studio .NET 2003 (or
      newer) installation.  This is critical if you have two or more
      versions of Visual Studio installed.
   5) Install the PyJuggler files somewhere convenient and set the
      environment variable $PYTHONPATH to include that directory.  The
      PyJuggler files must be installed in a directory named PyJuggler.
      For example, on a UNIX-based operating system, an easy place would
      be $HOME/lib/python2.2/site-packages/PyJuggler.  The PyJuggler
      installation directory must contain the following files:

         __init__.py (get it from the 'dist' subdirectory)
         vrj.py (get it from the 'dist' subdirectory)
         vpr.so (or vpr.pyd)
         jccl.so (or jccl.pyd)
         gadget.so (or gadget.pyd)
         __vrj.so (or __vrj.pyd)
         __osgapp.so (or __osgapp.pyd)

For more details about how to get and use bjam, see the following page:

   http://www.boost.org/tools/build/index.html
   http://www.boost.org/libs/python/doc/building.html

Using GNU Make
==============

If the use of Boost.Build is not an option at all, you can use the
configure- and make-based build system.  It is known to work well on
Linux, FreeBSD, and IRIX; it does not work correctly on Windows.  On
all platforms, the usage of the configure script is the same.  The
difference will be in the path to the natively compiled Boost.Python
installation.  The Boost.Python installation directory must contain a
subdirectory named 'include' with the Boost headers and a subdirectory
named 'lib' with the Boost.Python compiled libraries.

The short version of the build instructions for UNIX-based platforms
(including Cygwin) is this:

   % mkdir build
   % cd build
   % ../configure --with-boost-python=<Boost installation dir>
   % make

This assumes that you have Boost 1.31.x installed.  If you have a version
newer than 1.31 (i.e., 1.32, 1.33, etc.), you must add the option
--with-boost-version as follows:

   % ../configure --with-boost-python=<Boost installation dir> \
        --with-boost-version=<Boost version>

Valid values have only the major and minor version number.  DO NOT ADD
THE PATCH VERSION!!  This extra option is needed because the Boost
installation procedure incldues the Boost version number in the names of
installed files and directories.

If, for some reason, your Boost 1.31 (or newer) installation does not
use the new naming conventions (the Boost.Python library is named
libboost_python.so rather than libboost_python-gcc-mt.so), then add
the option --diable-boost-hacks when you run configure.

$Id$
