<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>
  <bookinfo>
    <title>PyJuggler</title>

    <subtitle>Getting Started Guide</subtitle>

    <authorgroup>
      <author>
        <firstname>Patrick</firstname>

        <surname>Hartling</surname>
      </author>
    </authorgroup>

    <date>$Date$</date>
  </bookinfo>

  <preface>
    <title>What is PyJuggler?</title>

    <para>PyJuggler is a collection of Python bindings for the VR Juggler C++
    application development framework. With PyJuggler, VR Juggler application
    objects can be written in Python and loaded into the VR Juggler C++
    microkernel. Python application objects can even be intermingled with C++
    application objects to allow for multi-language switching between virtual
    worlds.</para>

    <para>The Python bindings that make up PyJuggler are written as C++
    modules that the Python interpreter can load at runtime just as it would
    any other Python module. There are several Python modules, each
    corresponding to one of the software modules that comprise the larger
    Juggler framework. For example, the module
    <classname>PyJuggler.gadget</classname> contains bindings for the
    Gadgeteer C++ library.</para>
  </preface>

  <chapter>
    <title>Getting the Software</title>

    <para>Because PyJuggler follows the well-known layered architecture for
    software, it is built on top of other tools. These must be downloaded and
    installed prior to installing PyJuggler to ensure that dependencies are
    satisfied correctly.</para>

    <section>
      <title>Requirements</title>

      <itemizedlist>
        <listitem>
          <para><ulink url="http://www.python.org/">Python</ulink>: The
          dynamically typed object-oriented scripting language. The version of
          Python required depends on the requirements of Boost.Python (see the
          next bullet item), but as of this writing, Python 2.2 or newer is
          necessary.</para>
        </listitem>

        <listitem>
          <para><ulink
          url="http://www.boost.org/libs/python/doc/">Boost.Python</ulink>:
          The high-level glue between C++ and Python code. PyJuggler requires
          Boost.Python v2 or newer. The version of Boost.Python used should
          come from the Boost same version against which VR Juggler was
          compiled. As of this writing, that is Boost 1.31.0.</para>
        </listitem>

        <listitem>
          <para><ulink
          url="http://pyopengl.sourceforge.net/">PyOpenGL</ulink>: Python
          bindings for the OpenGL graphics API. As of this writing, PyJuggler
          has only been tested with OpenGL-based VR Juggler applications.
          These applications use PyOpenGL to make calls into the natively
          compiled OpenGL libraries on the local system. We have tested with
          PyOpenGL 2.0.</para>
        </listitem>

        <listitem>
          <para><ulink url="http://www.vrjuggler.org/">VR Juggler</ulink>: The
          cross-platform, cross-VR system virtual platform for which PyJuggler
          provides Python bindings. Without VR Juggler, PyJuggler has no
          purpose. Releases of PyJuggler come shortly after VR Juggler
          releases. Hence, the latest version of PyJuggler requires the latest
          version of VR Juggler (2.0 or newer).</para>
        </listitem>

        <listitem>
          <para><ulink url="http://ggt.sourceforge.net/">PyGMTL</ulink>:
          Python bindings for the Generic Math Template Library (GMTL). These
          are required for proper acquisition of GMTL-based data from VR
          Juggler classes. For example, the transformation matrix for a
          <classname>gadget.PositionInterface</classname> object will be
          returned as a <classname>gmtl.Matrix44f</classname> object. PyGMTL
          is developed independently of VR Juggler and PyJuggler, but the
          version of PyGMTL used must be the same as the version of GMTL that
          comes with a VR Juggler release.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Downloading</title>

      <para>PyJuggler is distributed from the VR Juggler SourceForge.net
      <ulink url="http://www.sourceforge.net/projects/vrjuggler/">project
      site</ulink>. Because PyJuggler is still in the developmental stages, it
      is recommended that users keep up to date with the latest version at all
      times. PyJuggler will always keep up to date with the VR Juggler API,
      and because it provides a one-to-one mapping of C++ to Python, the API
      will be identical except for slight differences based on Python
      syntax.</para>

      <para>PyJuggler is an open source software library, and as such, its
      source code is available. Users are free to download the source, look at
      it, and modify it (keeping in mind the requirements of the license, of
      course). For the most part, the PyJuggler source code is pretty dull;
      the interesting aspect is what developers can do to write VR Juggler
      application objects in Python. As such, the source is provided primarily
      so that people can compile it for their local hardware and operating
      system. Some pre-compiled binary versions will exist, but the
      requirements of those binaries may not satisfy every single user's
      needs.</para>
    </section>

    <section>
      <title>Extracting</title>

      <para>PyJuggler comes in a compressed archive format. For UNIX-based
      environments, we use the well-known <command>tar</command>(1) format for
      the archive and either <command>gzip</command>(1)
      (<filename>.gz</filename> file extension) or <command>bzip2</command>(1)
      (<filename>.bz2</filename> file extension) for the compression. Because
      pre-compiled versions of PyJuggler are quite large, we normally use the
      BZIP2 format because it gives a better compression ratio than GZIP. To
      extract the contents of a BZIP2-compressed TAR file, use the following
      if GNU <command>tar</command>(1) is not available:</para>

      <screen>% bzip2 -cd pyjuggler.tar.bz2 | tar -xvf -</screen>

      <para>If GNU <command>tar</command>(1) is installed (it may be installed
      as <command>gtar</command> on some systems), use the following simpler
      command:</para>

      <screen>% tar -xjvf pyjuggler.tar.bz2</screen>

      <para>For Win32 environments, we use PKZIP compression (files have a
      <filename>.zip</filename> extension). The typical way to extract such an
      archive is to use the <ulink url="http://www.winzip.com/">WinZip</ulink>
      software. We will not show its use here since it offers a fairly
      straightforward GUI.</para>
    </section>
  </chapter>

  <chapter>
    <title>Configuring the Environment</title>

    <para>PyJuggler needs all the environment variables required for execution
    of normal C++ VR Juggler applications. With the addition of Python into
    the mix, it may be necessary to set the <varname>PYTHONPATH</varname>
    environment variable. This environment variable tells Python where to look
    for modules outside of its default path. In other words, it
    <emphasis>augments</emphasis> the Python module search path to use the
    directories listed therein.</para>

    <para>The need for <varname>PYTHONPATH</varname> depends on where
    PyJuggler is installed. If PyJuggler is installed where Python modules are
    installed by default, then Python will not need any help to find the
    PyJuggler modules. However, a pre-compiled version of PyJuggler can be
    installed anywhere (which is good for people who do not have
    administrative rights on their local system and thus cannot perform
    system-wide installations). For example, on a UNIX-based system, PyJuggler
    could be unpacked into <filename>$HOME/pyjuggler</filename>. If PyJuggler
    was compiled against Python 2.2, <varname>PYTHONPATH</varname> would be
    set as follows (assuming the use of either csh or tcsh as the user's
    shell):</para>

    <screen>% setenv PYTHONPATH $HOME/pyjuggler/lib/python2.2/site-packages</screen>

    <para>For more information about Python, Python modules, and environment
    variables read by the Python interpreter, refer to the <ulink
    url="http://www.python.org/doc/">onilne Python
    documentation</ulink>.</para>

    <tip>
      <para>PyOpenGL and PyGMTL may have to be handled similarly to PyJuggler
      as far as <varname>PYTHONPATH</varname> is concerned. It may be
      convenient to install all three in the same place so that only one
      directory must be specified in <varname>PYTHONPATH</varname>. Of course,
      one or both of PyOpenGL or PyGMTL may be installed in the default Python
      module directory, so this may not be a concern at all.</para>
    </tip>
  </chapter>

  <chapter>
    <title>Running Example Applications</title>

    <para>Executing the example PyJuggler applications works very similarly to
    C++ VR Juggler applications. This is done on purpose to make it easier for
    people with C++ VR Juggler experience to get started with PyJuggler. Of
    course, how any given application is written is entirely up to the author;
    these are simply examples.</para>

    <section>
      <title>simpleGL</title>

      <para>In the PyJuggler installation directory, a very simple <quote>pure
      Python</quote> application can be found under
      <filename>share/pyjuggler/examples/python/simpleGL</filename>. The
      directory contains a single file <filename>simpleGL.py</filename>. To
      execute this application, the following will work in a UNIX-based
      environment:</para>

      <screen>% ./simpleGL.py standalone.jconf</screen>

      <para>For a DOS/Win32 environment, the command is similar:</para>

      <screen>&gt; python simpleGL.py standalone.jconf</screen>

      <note>
        <para>For VR Juggler 2.0 Alpha 4 and beyond, the full path to the
        configuration files does not have to be specified, so it is omitted in
        the above examples. The file <filename>standalone.jconf</filename> can
        be found in the directory
        <filename>$VJ_BASE_DIR/share/vrjuggler/data/configFiles</filename>.</para>
      </note>

      <para>This opens a single graphics window showing the default VR Juggler
      simulator environment and a gray box. Clicking button 1 on the mouse
      causes the box to be grabbed so that it moves wherever the simulated
      user's hand moves. Releasing button 1 causes the box to return to its
      original location. To exit the application, press the
      <keysym>ESC</keysym> key.</para>
    </section>

    <section>
      <title>PyAppLoader</title>

      <para>PyAppLoader is a C++ application that demonstrates how to load
      Python modules containing VR Juggler application objects into the VR
      Juggler microkernel for execution. It can be found in
      <filename>share/pyjuggler/examples/cxx/PyAppLoader</filename> under the
      base PyJuggler installation directory.</para>
    </section>

    <section>
      <title>PyExtApp</title>

      <para>PyExtApp is another C++ that shows how Python code can be called
      from within a C++ VR Juggler application object. The Python function
      called is quite trivial because the purpose of the application is to
      show what of the <ulink
      url="http://www.python.org/doc/current/api/api.html">Python/C
      API</ulink> must be utilized in order to make things work. The source
      code can be found in
      <filename>share/pyjuggler/examples/cxx/PyExtApp</filename> under the
      base PyJuggler installation directory.</para>
    </section>
  </chapter>
</book>