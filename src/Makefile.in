# ************** <auto-copyright.pl BEGIN do not edit this line> **************
#
# PyJuggler is (C) Copyright 2002, 2003 by Patrick Hartling
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# -----------------------------------------------------------------
# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$
# -----------------------------------------------------------------
#
# *************** <auto-copyright.pl END do not edit this line> ***************

srcdir=		@srcdir@
prefix=		@prefix@
topdir=		@topdir@
top_srcdir=	@top_srcdir@

CXX=		@CXX@
CXXFLAGS=	$(shell vrjuggler-config --cxxflags) @PYTHON_INCLUDES@	\
		-I$(top_srcdir) -I$(srcdir)
INCLUDES=	$(shell vrjuggler-config --includes) -I$(top_srcdir)	\
		-I$(srcdir)
PYTHON=		@PYTHON@
PYSTE=		$(PYTHON) @PYSTE@ $(INCLUDES)

VPR_LIBS=		$(shell vpr-config --libs)
VPR_EXTRA_LIBS=		$(shell vpr-config --extra-libs)
JCCL_LIBS=		$(shell jccl-config --libs)
JCCL_EXTRA_LIBS=	$(shell jccl-config --extra-libs)
GADGET_LIBS=		$(shell gadgeteer-config --libs)
GADGET_EXTRA_LIBS=	$(shell gadgeteer-config --extra-libs)
VJ_LIBS=		$(shell vrjuggler-config --libs)
VJ_EXTRA_LIBS=		$(shell vrjuggler-config --extra-libs)

PYTHON_VERSION=		@PYTHON_VERSION@
PYTHON_PACKAGES=	$(prefix)/lib/python$(PYTHON_VERSION)/site-packages/PyJuggler

PYTHON_LDFLAGS=		@PYTHON_LIB_DEPS@
BOOST_PYTHON_LDFLAGS=	@BOOST_PYTHON_LDFLAGS@

# Linker flags needed by all extension modules.
LDFLAGS=		@EXTRA_LINK_FLAGS@ $(BOOST_PYTHON_LDFLAGS)	\
			$(PYTHON_LDFLAGS)

OBJEXT=		@OBJEXT@
DLLEXT=		@DYNAMICLIB_EXT@

PYSTE_FILES=	vpr.pyste	\
		jccl.pyste	\
		gadget.pyste	\
		vrj.pyste

VJ_AVATAR_ROOT=	@VJ_AVATAR_ROOT@
VJ_AVATAR_INC=	-I$(VJ_AVATAR_ROOT)/include
VJ_AVATAR_LIBS=	-L$(VJ_AVATAR_ROOT)/lib -lavatar -lcal3d $(VJ_LIBS)	\
		$(VJ_EXTRA_LIBS)

# Build the vjAvatar bindings conditionally.
ifeq (@HAVE_VJ_AVATAR@, Y)

PYSTE_FILES+=	vjAvatar.pyste
CXXFLAGS+=	$(VJ_AVATAR_INC)
INCLUDES+=	$(VJ_AVATAR_INC)
endif

SRCS=		$(PYSTE_FILES:.pyste=.cpp)
OBJS=		$(SRCS:.cpp=.$(OBJEXT))
MODS=		$(PYSTE_FILES:.pyste=.$(DLLEXT)) gmtl.$(DLLEXT)

GMTL_SRCS=	\
	gmtl/gmtl.cpp							\
	gmtl/_AABox_double.cpp						\
	gmtl/_AABox_float.cpp						\
	gmtl/_AxisAngle_double.cpp					\
	gmtl/_AxisAngle_float.cpp					\
	gmtl/_Coord_gmtl_Vec_double_3_gmtl_AxisAngle_double.cpp		\
	gmtl/_Coord_gmtl_Vec_double_3_gmtl_EulerAngle_double_gmtl_XYZ.cpp \
	gmtl/_Coord_gmtl_Vec_double_3_gmtl_EulerAngle_double_gmtl_ZXY.cpp \
	gmtl/_Coord_gmtl_Vec_double_3_gmtl_EulerAngle_double_gmtl_ZYX.cpp \
	gmtl/_Coord_gmtl_Vec_double_3_gmtl_Quat_double.cpp		\
	gmtl/_Coord_gmtl_Vec_double_4_gmtl_AxisAngle_double.cpp		\
	gmtl/_Coord_gmtl_Vec_double_4_gmtl_EulerAngle_double_gmtl_XYZ.cpp \
	gmtl/_Coord_gmtl_Vec_double_4_gmtl_EulerAngle_double_gmtl_ZXY.cpp \
	gmtl/_Coord_gmtl_Vec_double_4_gmtl_EulerAngle_double_gmtl_ZYX.cpp \
	gmtl/_Coord_gmtl_Vec_double_4_gmtl_Quat_double.cpp		\
	gmtl/_Coord_gmtl_Vec_float_3_gmtl_AxisAngle_float.cpp		\
	gmtl/_Coord_gmtl_Vec_float_3_gmtl_EulerAngle_float_gmtl_XYZ.cpp	\
	gmtl/_Coord_gmtl_Vec_float_3_gmtl_EulerAngle_float_gmtl_ZXY.cpp	\
	gmtl/_Coord_gmtl_Vec_float_3_gmtl_EulerAngle_float_gmtl_ZYX.cpp	\
	gmtl/_Coord_gmtl_Vec_float_3_gmtl_Quat_float.cpp		\
	gmtl/_Coord_gmtl_Vec_float_4_gmtl_AxisAngle_float.cpp		\
	gmtl/_Coord_gmtl_Vec_float_4_gmtl_EulerAngle_float_gmtl_XYZ.cpp	\
	gmtl/_Coord_gmtl_Vec_float_4_gmtl_EulerAngle_float_gmtl_ZXY.cpp	\
	gmtl/_Coord_gmtl_Vec_float_4_gmtl_EulerAngle_float_gmtl_ZYX.cpp	\
	gmtl/_Coord_gmtl_Vec_float_4_gmtl_Quat_float.cpp		\
	gmtl/_EulerAngle_float_gmtl_XYZ.cpp				\
	gmtl/_EulerAngle_float_gmtl_ZXY.cpp				\
	gmtl/_EulerAngle_float_gmtl_ZYX.cpp				\
	gmtl/_gmtl_Defines_h.cpp					\
	gmtl/_gmtl_Math_h.cpp		        			\
	gmtl/_gmtl_functions_h.cpp					\
	gmtl/_gmtl_wrappers_h.cpp					\
	gmtl/_LineSeg_double.cpp					\
	gmtl/_LineSeg_float.cpp						\
	gmtl/_Matrix_float_3_3.cpp					\
	gmtl/_Matrix_float_4_4.cpp					\
	gmtl/_Plane_double.cpp						\
	gmtl/_Plane_float.cpp						\
	gmtl/_Point_float_2.cpp						\
	gmtl/_Point_float_3.cpp						\
	gmtl/_Point_int_2.cpp						\
	gmtl/_Point_int_3.cpp						\
	gmtl/_Quat_double.cpp						\
	gmtl/_Quat_float.cpp						\
	gmtl/_Ray_double.cpp						\
	gmtl/_Ray_float.cpp						\
	gmtl/_Sphere_double.cpp						\
	gmtl/_Sphere_float.cpp						\
	gmtl/_Tri_double.cpp						\
	gmtl/_Tri_float.cpp						\
	gmtl/_Tri_int.cpp						\
	gmtl/_VecBase_int_2.cpp						\
	gmtl/_VecBase_double_2.cpp					\
	gmtl/_VecBase_float_2.cpp					\
	gmtl/_VecBase_double_3.cpp					\
	gmtl/_VecBase_float_3.cpp					\
	gmtl/_VecBase_int_3.cpp						\
	gmtl/_VecBase_double_4.cpp					\
	gmtl/_VecBase_float_4.cpp					\
	gmtl/_VecBase_int_4.cpp						\
	gmtl/_Vec_double_3.cpp						\
	gmtl/_Vec_double_4.cpp						\
	gmtl/_Vec_float_3.cpp						\
	gmtl/_Vec_float_4.cpp						\
	gmtl/_Vec_int_3.cpp

GMTL_OBJS=	$(GMTL_SRCS:.cpp=.$(OBJEXT))
VPR_OBJS=	vpr.$(OBJEXT)
JCCL_OBJS=	jccl.$(OBJEXT)
GADGET_OBJS=	gadget.$(OBJEXT)
VRJ_OBJS=	vrj.$(OBJEXT)
VJ_AVATAR_OBJS=	vjAvatar.$(OBJEXT)

PYJUTIL_LIB=	-L$(topdir)/lib -lpyjutil

vpath %.cpp $(srcdir)
vpath %.pyste $(srcdir)/../pyste

# -----------------------------------------------------------------------------
# Targets
# -----------------------------------------------------------------------------

# XXX: It will probably be helpful in the long run to have 'debug' and 'optim'
# targets that link against the appropriate Boost.Python library.
# It might also be good to do static linking against Boost.Python to simplify
# distribution issues.

all:
	-[ ! -d gmtl ] && mkdir gmtl
	$(MAKE) modules
	$(MAKE) prefix="$(topdir)" install

modules: $(MODS)

install:
	-[ ! -d $(PYTHON_PACKAGES) ] && mkdir -p $(PYTHON_PACKAGES)
	cp $(top_srcdir)/dist/__init__.py $(PYTHON_PACKAGES)
	for mod in $(MODS) ; do			\
            cp -p $$mod $(PYTHON_PACKAGES) ;	\
          done

# Rule for generating a .cpp file from a .pyste file.
%.cpp: %.pyste
	$(PYSTE) --module=$(basename $(@F)) $<

%.$(OBJEXT): %.cpp
	$(CXX) $(CXXFLAGS) -o $@ -c $<

%.$(DLLEXT): %.$(OBJEXT)
	$(CXX) -shared -o $@ $< $(LDFLAGS) $(LIBS) $(EXTRA_LIBS)

vpr.$(DLLEXT): $(VPR_OBJS)
	$(CXX) -shared -o $@ $(VPR_OBJS) $(LDFLAGS) $(VPR_LIBS)		\
          $(VPR_EXTRA_LIBS)

jccl.$(DLLEXT): $(JCCL_OBJS)
	$(CXX) -shared -o $@ $(JCCL_OBJS) $(LDFLAGS) $(JCCL_LIBS)	\
          $(JCCL_EXTRA_LIBS)

gadget.$(DLLEXT): $(GADGET_OBJS)
	$(CXX) -shared -o $@ $(GADGET_OBJS) $(LDFLAGS) $(GADGET_LIBS)	\
          $(GADGET_EXTRA_LIBS)

vrj.$(DLLEXT): $(VRJ_OBJS)
	$(CXX) -shared -o $@ $(VRJ_OBJS) $(PYJUTIL_LIB) $(LDFLAGS)	\
          $(VJ_LIBS) $(VJ_EXTRA_LIBS)

vjAvatar.$(DLLEXT): $(VJ_AVATAR_OBJS)
	$(CXX) -shared -o $@ $(VJ_AVATAR_OBJS) $(PYJUTIL_LIB)		\
          $(LDFLAGS) $(VJ_AVATAR_LIBS)

gmtl.$(DLLEXT): $(GMTL_OBJS)
	$(CXX) -shared -o $@ $(GMTL_OBJS) $(LDFLAGS)

clean:
	rm -f $(OBJS) $(GMTL_OBJS)

clobber:
	$(MAKE) clean
	rm -f $(MODS)

# -----------------------------------------------------------------------------
# Dependency generation.
# XXX: This doesn't work quite right yet ...
# -----------------------------------------------------------------------------
BASIC_OBJECTS=	$(OBJS)
CXX_COMPILE=	$(CXX) $(CXXFLAGS)

include $(top_srcdir)/Doozer++/mk/dpp.dep.mk
#-include $(DEPEND_FILES)
